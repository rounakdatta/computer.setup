---

- name: set fish binary location
  set_fact:
    fish_native_path: "{{ '/opt/homebrew/bin/fish' if ansible_distribution == 'MacOSX' else '/usr/bin/fish' }}"

- name: make sure personal directory exists
  command: mkdir -p ~/personal/

- name: install tpm tmux from source
  git:
    repo: https://github.com/tmux-plugins/tpm.git
    dest: "~/.tmux/plugins/tpm"

- name: set up private password store
  include: pass.yml

- name: set fish as the default shell
  shell: "chsh -s {{ fish_native_path }}"
  become: True

- name: set up gopass-jsonapi
  block:
    - name: create a temporary directory
      command: mkdir -p ./tmp/gopass-jsonapi

    - name: download the package
      get_url:
        url: "https://github.com/gopasspw/gopass-jsonapi/releases/download/v1.14.3/gopass-jsonapi-1.14.3-darwin-arm64.tar.gz"
        dest: "./tmp/gopass-jsonapi.tar.gz"

    - name: extract the archive
      command: "tar -xzf ./tmp/gopass-jsonapi.tar.gz --directory ./tmp/gopass-jsonapi/"

    - name: move binary to PATH location
      command: "mv ./tmp/gopass-jsonapi/gopass-jsonapi /usr/local/bin/gopass-jsonapi"
      become: True
  when: ansible_distribution == "MacOSX"

- name: configure gopass-jsonapi for chrome
  expect:
    command: gopass-jsonapi configure
    responses:
      (.*)which browser(.*): "chrome"
      (.*)all users(.*): "N"
      (.*)gopass_wrapper.sh(.*): "\n"
      (.*)manifest and weapper(.*): "Y"

- name: set up rust & cargo
  shell: curl https://sh.rustup.rs -sSf | sh -s -- -y

- name: configure and start nextdns service
  vars:
    nextdns_id:
      - "{{ lookup('community.general.passwordstore', 'nextdns/id') }}"
  block:
    - name: set configurations and then auto-start
      shell: nextdns install -config "{{ nextdns_id }}" -report-client-info -auto-activate
      become: True
      ignore_errors: True

- name: set up ssh hosts through config file generation
  include: ssh.yml
  ignore_errors: yes
  vars:
    HostLabel: "{{ lookup('community.general.passwordstore', item + '/HostLabel', errors='ignore') }}"
    Preferredauthentications: "{{ lookup('community.general.passwordstore', item + '/Preferredauthentications', errors='ignore') }}"
    User: "{{ lookup('community.general.passwordstore', item + '/User', errors='ignore') }}"
    IdentityFile: "{{ lookup('community.general.passwordstore', item + '/IdentityFile', errors='ignore') }}"
    HostName: "{{ lookup('community.general.passwordstore', item + '/HostName', errors='ignore') }}"
    ProxyCommand: "{{ lookup('community.general.passwordstore', item + '/ProxyCommand', errors='ignore') }}"
    Port: "{{ lookup('community.general.passwordstore', item + '/Port', errors='ignore') }}"
    StrictHostKeyChecking: "{{ lookup('community.general.passwordstore', item + '/StrictHostKeyChecking', errors='ignore') }}"
  with_items: "{{ ssh_hosts }}"

- name: set up fisher for fish
  shell: curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher
  args:
    executable: "{{ fish_native_path }}"
  ignore_errors: True

- name: set up fisher packages
  ignore_errors: True
  shell: "fisher install {{ item }}"
  args:
    executable: "{{ fish_native_path }}"
  with_items: "{{ fisher_packages }}"

- name: configure bluetooth on Linux
  block:
    - name: start the bluetooth service
      systemd:
        name: bluetooth
        state: started

    - name: start pulseaudio instance if not already
      shell: pulseaudio -k
  when: ansible_distribution == "Archlinux"

- name: start mysql server on macOS
  ignore_errors: True
  block:
    - name: set correct user permissions for the mysql service
      shell: chown -R _mysql:mysql /usr/local/var/mysql
      become: True

    - name: start the service
      shell: mysql.server start
      become: True
  when: ansible_distribution == "MacOSX"

- name: Additional configurations to experience tmux on Linux
  ignore_errors: True
  block:
    - name: generate aliases for copy/paste to be at par with macOS
      ignore_errors: True
      blockinfile:
        dest: "~/.config/fish/config.fish"
        marker: "# Linux specific aliases"
        block: |
          alias pbcopy="xsel --clipboard --input"
          alias pbpaste="xsel --clipboard --output"

    - name: enable the tmux system clipboard
      ignore_errors: True
      blockinfile:
        dest: "~/.tmux.conf"
        marker: "# Linux specific configuration"
        block: |
          setw -g set-clipboard on

    - name: set the fish shell path correctly
      ignore_errors: True
      lineinfile:
        dest: "~/.tmux.conf"
        regexp: ".*default-shell.*$"
        line: "set-option -g default-shell /usr/bin/fish"
  when: ansible_distribution == "Archlinux"

- name: Set the shell path correctly on MacOS
  ignore_errors: True
  lineinfile:
    dest: "~/.tmux.conf"
    regexp: ".*default-shell.*$"
    line: "set-option -g default-shell /opt/homebrew/bin/fish"
  when: ansible_distribution == "MacOSX"

- name: Additional configuration to make pinentry program work on Linux
  lineinfile:
    dest: "~/.gnupg/gpg-agent.conf"
    regexp: "^pinentry-program.*$"
    state: absent
  when: ansible_distribution == "Archlinux"

- name: Refresh the font cache on Linux
  shell: "fc-cache -vf"
  when: ansible_distribution == "Archlinux"
